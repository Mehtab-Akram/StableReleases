@model TopMenuModel
<nav class="navbar navbar-expand-lg navbar-dark bg-dark third_nav">
    <div class="container">
        <button class="navbar-toggler d-lg-none"
                type="button"
                data-toggle="collapse"
                data-target="#collapsibleNavId"
                aria-controls="collapsibleNavId"
                aria-expanded="false"
                aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="collapsibleNavId">
            <ul class="navbar-nav mr-auto mt-2 mt-lg-0 thirdNav__ul"
                id="third_nav_ul">
                @if (Model.DisplayHomePageMenuItem)
                {
                    <li class="nav-item"><a href="@Url.RouteUrl("HomePage")">@T("HomePage")</a></li>
                }

                <li class="nav-item"><a href="~/Shop?q=">Shop</a></li>

                @{
                    var rootCategories = Model.Categories.Where(x => x.IncludeInTopMenu).ToList();
                }
                @foreach (var category in rootCategories)
                {
                    var categoryLineModel = new TopMenuModel.CategoryLineModel
                    {
                        Category = category
                    };
                    @await Html.PartialAsync("_CategoryLine.TopMenu", categoryLineModel)
                }

                @foreach (var topic in Model.Topics)
                {
                    <li class="nav-item"><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
                }
                @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
                {
                    <li class="nav-item"><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
                }
                @if (Model.DisplayProductSearchMenuItem)
                {
                    <li class="nav-item"><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
                }
                @if (Model.DisplayCustomerInfoMenuItem)
                {
                    <li class="nav-item"><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
                }
                @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
                {
                    <li class="nav-item"><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
                }
                @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
                {
                    <li class="nav-item"><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
                }
                @if (Model.DisplayContactUsMenuItem)
                {
                    <li class="nav-item"><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
                }
            </ul>
            <!-- Searchbox Icon-->
            <button type="button"
                    class="search searchBtn"
                    onclick="toggleSearchBox()">
                <span class="lnr lnr-magnifier" id="searchbox_icon"></span>
            </button>
        </div>
    </div>
</nav>

@*@model TopMenuModel
    <ul class="top-menu">
        @await Component.InvokeAsync("Widget", new { widgetZone = "header_menu_before" })
        @if (Model.DisplayHomePageMenuItem)
        {
            <li><a href="@Url.RouteUrl("HomePage")">@T("HomePage")</a></li>
        }
        @{
            var rootCategories = Model.Categories.Where(x => x.IncludeInTopMenu).ToList();
        }
        @foreach (var category in rootCategories)
        {
            var categoryLineModel = new TopMenuModel.CategoryLineModel
            {
                Category = category
            };
            @await Html.PartialAsync("_CategoryLine.TopMenu", categoryLineModel)
        }
        @foreach (var topic in Model.Topics)
        {
            <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
        }
        @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
        {
            <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
        }
        @if (Model.DisplayProductSearchMenuItem)
        {
            <li><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
        }
        @if (Model.DisplayCustomerInfoMenuItem)
        {
            <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
        }
        @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
        {
            <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
        }
        @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
        {
            <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
        }
        @if (Model.DisplayContactUsMenuItem)
        {
            <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = "header_menu_after" })
    </ul>
    @{
        var rootCategoriesResponsive = Model.Categories.ToList();
        //name it "Categories" if we have only categories. Otherwise, "Menu"
        var responsiveMenuTitle = Model.HasOnlyCategories ? T("Categories") : T("Menu");
        <div class="menu-toggle">@responsiveMenuTitle</div>
        <ul class="top-menu mobile">
            @await Component.InvokeAsync("Widget", new { widgetZone = "mob_header_menu_before" })
            @if (Model.DisplayHomePageMenuItem)
            {
                <li><a href="@Url.RouteUrl("HomePage")">@T("HomePage")</a></li>
            }
            @foreach (var category in rootCategoriesResponsive)
            {
                var categoryLineModel = new TopMenuModel.CategoryLineModel
                {
                    Category = category,
                    ResponsiveMobileMenu = true
                };
                @await Html.PartialAsync("_CategoryLine.TopMenu", categoryLineModel)
            }
            @foreach (var topic in Model.Topics)
            {
                <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
            }
            @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
            {
                <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
            }
            @if (Model.DisplayProductSearchMenuItem)
            {
                <li><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
            }
            @if (Model.DisplayCustomerInfoMenuItem)
            {
                <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
            }
            @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
            {
                <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
            }
            @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
            {
                <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
            }
            @if (Model.DisplayContactUsMenuItem)
            {
                <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
            }
            @await Component.InvokeAsync("Widget", new { widgetZone = "mob_header_menu_after" })
        </ul>
        <script type="text/javascript" asp-location="Footer">
            $(document).ready(function () {
                $('.menu-toggle').click(function () {
                    $(this).siblings('.top-menu.mobile').slideToggle('slow');
                });
                $('.top-menu.mobile .sublist-toggle').click(function () {
                    $(this).siblings('.sublist').slideToggle('slow');
                });
            });
        </script>
    }*@